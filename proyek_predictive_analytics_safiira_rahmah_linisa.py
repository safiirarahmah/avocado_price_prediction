# -*- coding: utf-8 -*-
"""Proyek Predictive Analytics - Safiira Rahmah Linisa.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UItoa2wAdbLqmG_QsKieUwqz1-mwL6ld

# **Avocado Prediction Price**

###Proyek Pertama : Predictive Analytics

* Nama : Safiira Rahmah Linisa
* SIB ID : M248Y0537
* SIB Group : M02

#Data Loading

Pertama, Import Library yang Dibutuhkan
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
# %matplotlib inline
import seaborn as sns

"""Membaca dan melihat isi dataset"""

avocado = pd.read_csv('/content/Avocado.csv')
avocado

"""#Exploratory

Berikut ini variabel-variable yang terdapat dalam dataset

* Date: Tanggal Observasi
* AveragePrice: Harga Rata-rata satu buah Alpukat
* Total Volume: Jumalah Alpukat yang terjual
* 4046: Total jumlah alpukat terjual dengan PLU 4046
* 4225: Total jumlah alpukat terjual dengan PLU 4046
* 4770: Total jumlah alpukat terjual dengan PLU 4046
* Total Bags: Total jumlah sekantung alpukat yang terjual
* Small Bags: Kantung/wadah kecil yang terjual
* Large Bags: Kantung/wadah besar yang terjual
* XLarge Bags: Kantung/wadah ekstra besar yang terjual
* type: Jenis alpukat konvesional atau organik
* year: Tahun
* region: Kota atau wilayah obeservasi

## Informasi Dataset

Untuk melihat type data dan mengecek missing value pada dataset.
"""

avocado.info()

"""## Melihat Informasi Statistik dari Dataset"""

avocado.describe()

"""### Menangani missing value"""

avocado.loc[(avocado['Total Bags']==0)]

# Drop baris dengan nilai 'Total Bags','Small Bags','Large Bags' = 0
avocado = avocado.loc[(avocado[['Total Bags','Small Bags','Large Bags']]!=0).all(axis=1)]
 
# Cek ukuran data untuk memastikan baris sudah di-drop
avocado.shape

"""##Deteksi outlier"""

sns.boxplot(x=avocado['AveragePrice'])

sns.boxplot(x=avocado['Total Bags'])

sns.boxplot(x=avocado['Small Bags'])

"""Menangani Outlier dengan IQR Methode"""

Q1 = avocado.quantile(0.25)
Q3 = avocado.quantile(0.75)
IQR=Q3-Q1
avocado=avocado[~((avocado<(Q1-1.5*IQR))|(avocado>(Q3+1.5*IQR))).any(axis=1)]
 
# Cek ukuran dataset setelah kita drop outliers
avocado.shape

"""## Univariate Analysis"""

avocado.hist(bins=50, figsize=(15, 10))
plt.show()

"""## Multivariet Analysis"""

sns.pairplot(avocado, diag_kind = 'kde')

plt.figure(figsize=(10, 8))
correlation_matrix = avocado.corr().round(2)
 
sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Correlation Matrix untuk Fitur Numerik ", size=20)

"""# Data Preparation

Menghapus atribut yang tidak sesuai dan tidak dibutuhkan.
"""

unused = ['XLarge Bags', 'year','Date','type','region']
avocado.drop(unused, axis=1, inplace=True)

avocado

"""## Split Data
membagi dataset menjadi 80% data training dan 20% data testing
"""

from sklearn.model_selection import train_test_split
 
x = avocado.drop(['AveragePrice'],axis =1)
y = avocado['AveragePrice']
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 1)

"""## Normalisasi Data

### Transformasi
"""

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()
x_train = scaler.fit_transform(x_train)

# Siapkan dataframe untuk analisis model
models = pd.DataFrame(index=['train_mse', 'test_mse'], 
                      columns=['KNN', 'RandomForest', 'Boosting'])

"""# Model Deployment

##Training Model

**K-Nearest Neighbours**
"""

from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error
 
knn = KNeighborsRegressor(n_neighbors=5)
knn.fit(x_train, y_train)
models.loc['train_mse','knn'] = mean_squared_error(y_pred = knn.predict(x_train), y_true=y_train)

"""**Random Forest**"""

# Impor library yang dibutuhkan
from sklearn.ensemble import RandomForestRegressor
 
# buat model prediksi
RF = RandomForestRegressor(n_estimators=50, max_depth=16, random_state=55, n_jobs=-1)
RF.fit(x_train, y_train)
 
models.loc['train_mse','RandomForest'] = mean_squared_error(y_pred=RF.predict(x_train), y_true=y_train)

"""**Boosting**"""

from sklearn.ensemble import AdaBoostRegressor
 
boosting = AdaBoostRegressor(learning_rate=0.05, random_state=55)                             
boosting.fit(x_train, y_train)
models.loc['train_mse','Boosting'] = mean_squared_error(y_pred=boosting.predict(x_train), y_true=y_train)

"""# Model Evaluation"""

# Buat variabel mse yang isinya adalah dataframe nilai mse data train dan test pada masing-masing algoritma
mse = pd.DataFrame(columns=['train', 'test'], index=['KNN','RF','Boosting'])
 
# Buat dictionary untuk setiap algoritma yang digunakan
model_dict = {'KNN': knn, 'RF': RF, 'Boosting': boosting}
 
# Hitung Mean Squared Error masing-masing algoritma pada data train dan test
for name, model in model_dict.items():
    mse.loc[name, 'train'] = mean_squared_error(y_true=y_train, y_pred=model.predict(x_train))/1e3 
    mse.loc[name, 'test'] = mean_squared_error(y_true=y_test, y_pred=model.predict(x_test))/1e3
 
# Panggil mse
mse

fig, ax = plt.subplots()
mse.sort_values(by='test', ascending=False).plot(kind='barh', ax=ax, zorder=3)
ax.grid(zorder=0)

"""Hasil visualisasi menunnjukan algoritma KNN memiliki nilai MSE paling kecil"""

prediksi = _test.iloc[:1].copy()
pred_dict = {'y_true':y_test[:1]}
for name, model in model_dict.items():
    pred_dict['prediksi_'+name] = model.predict(prediksi).round(1)
 
pd.DataFrame(pred_dict)

"""Hasil prediksi menunjukkan algoritma KNN memiliki nilai prediksi paling sesuai. """